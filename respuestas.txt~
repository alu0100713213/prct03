21. ¿Cuales son las diferencias entre la ejecucion del program "Hola mundo" con el interprete de ruby y el interprete interactivo del ejercicio anterior?

En el interprete interactivo se ejecuta linea por linea mostrando la linea que va a ejecutar y la version siempre antes de cada sentencia.
En cambio en el interprete de ruby directamente ejecuta el código fuente.

27. ¿Cuales son las diferencias entre la ejecucion del programa "hola mundo" con el interprete interactivo y con pry?

En la ejecución del hola mundo, solo hay sentencias explicitas de lo que tiene que hacer el programa. 
En cambio en el interprete interactivo con pry, llamamos a pry para que se inicie y apartir de ahí podemos modificar nuestras variables y clases en tiempo de ejecución.

35. ¿Cómo funciona %q?¿Qué es %q{hello world\n}?

Nos muestra la cadena literalmente, en el caso por ejemplo de hacer un push. 

36. ¿Cómo funciona %Q?¿Qué es %Q{hello world\n}?

Nos devuelve cadenas interpoladas, como si usaramos comillas dobles. Por eso nos devuelve la cadena Hello World\n. Nos añade el retorno de carro. Es la diferencia con el anterior. 

37. ¿Qué queda en c?

En este caso la etiqueta HERE no tiene las comillas. Por lo que se interpolan los valores de a y b y se copian los valores. 

38. ¿Qué queda en c?

Aquí la etiqueta HERE tiene comillas simples por lo que se copian literalmente los valores de a y b. 

39. s = "hello". ¿Cuál es el valor de las siguientes expresiones?

s[0,2] = "he"
s[-1,1] = "o"
s[0,10] = "hello"

Esta sintaxis lo que hace es tratar a "hello" como una cadena de caracteres en forma de vector. Teniendo cada letra una posición determinada. 

40. ¿Qué queda en g?

En g queda "hello world". Ya que al hacer g << " world" hemos añadido a la variable una palabra.

41. ¿Qué queda en e?

En e queda: ... lo que hace es multiplicar el caracter por tres 

42. ¿Cuál es el resultado? 

El resultado es "2 2 2" lo que hemos echo es sumarle a la variable a, uno. Y multiplicarlo por tres ese valor. 

43. ¿Qué es esto? %w[this is a test]

El operador %w lo que hace es crearnos un array a partir de la cadena de caracter como separador usa el espacio en blanco. Dentro del array lo que hay son posiciones con cadena de caracteres con comillas simples. 

44. ¿Que es esto? %w[\t \n]

45. ¿Que es esto? %W[\t \n]

46. ¿Que contiene nils? nils = Array.new(3)

nils es un array de tamaño 3 donde cada espacio del vector esta vacio. 

47. ¿Que contiene zeros? zeros = Array.new(3, 0)

zeros es un vector como el anterior, pero en este caso las posiciones 0,1,2 contienen 0 en cada una. 

48. ¿Que queda en b?

Un array que contiene 1,2,3,4

49. ¿Qué queda en c?

=> [0, 2, 4] El vector lo que hace es multiplicar el indice i por 2.

50. ¿Cuál es el resultado de cada una de estas operaciones? 
a[1,1] = ["b"]
a[-2,2] = ["d","e"]
a[0..2] = ["a","b","c"]
a[0..1] = ["a","b"]
a[-2..-1] = ["d","e"]

51. ¿Cuál es el resultado de cada una de estas operaciones? 

a[0,2] = %w{A B} --> ["A", "B"]
a => ["A", "B", "c", "d", "e"]

52. ¿Cuál es el resultado de cada una de estas operaciones? 

a = (1...4).to_a ==> [1,2,3]
a = a + [4,5] ==> [1,2,3,4,5]
a += [[6,7,8]] ==> [1, 2, 3, 4, 5, [6, 7, 8]]
a = a +9 ==> TypeError: no implicit conversion of Fixnum into Array

53. ¿Cuál es el resultado de cada una de estas operaciones? 

x = %w{a b c b a} => ["a", "b", "c", "b", "a"]
x = x - %w{b c d} => ["a", "a"]

54. ¿Cuál es el resultado de cada una de estas operaciones? 

z = [0]*8 => [0, 0, 0, 0, 0, 0, 0, 0]

55. ¿Cuál es el resultado de cada una de estas operaciones? 


